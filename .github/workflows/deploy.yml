name: CI/CD

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    env:
      SKIP_TESTS: 'true'

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version

      - name: Log in to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Setup JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Grant execute permission to gradlew
        run: chmod +x gradlew

      - name: Initialize Gradle Wrapper (if gradlew is missing)
        run: gradle wrapper

      - name: Build with Gradle
        run: |
          ./gradlew :auth:clean :auth:build -x test
          ./gradlew :api-gateway:clean :api-gateway:build -x test
          ./gradlew :discovery-service:clean :discovery-service:build -x test
          ./gradlew :order:clean :order:build -x test
          ./gradlew :payment:clean :payment:build -x test
          ./gradlew :product:clean :product:build -x test

      - name: Build and Push Docker Images
        run: |
          docker compose -f service-module.yml build
          docker compose -f zookeeper-kafka.yml build

          docker compose -f service-module.yml push
          docker compose -f zookeeper-kafka.yml push

      # 🔽 Fly.io 배포 단계 추가
      - name: Setup Fly CLI
        uses: superfly/flyctl-actions/setup-flyctl@master

      - name: Deploy PostgreSQL to Fly.io
        run: |
          flyctl secrets set \
          POSTGRES_USER=${{ secrets.POSTGRES_USER }} \
          POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} \
          POSTGRES_DB=${{ secrets.POSTGRES_DB }} \
          --app your-fly-postgres-app
          
          cd postgres-app
        
          flyctl deploy --remote-only --app your-fly-postgres-app
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}

      - name: Deploy Redis to Fly.io
        run: |
          
          flyctl secrets set \
          REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }} \
          REDIS_USER=${{ secrets.REDIS_USER }} \
          --app your-fly-redis-app
          
          cd redis-app
          flyctl deploy --remote-only --app your-fly-redis-app
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}

      # 🔽 기존 EC2 배포 흐름은 그대로 유지
      - name: Decode SSH key
        run: |
          echo "${{ secrets.EC2_SSH_KEY }}" | base64 -d > ec2_key.pem
          chmod 600 ec2_key.pem

      - name: Deploy to EC2 via SSH
        uses: appleboy/ssh-action@v0.1.6
        timeout-minutes: 60
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key_path: ec2_key.pem
          script: |
            if [ ! -d "msa-project" ]; then
              git clone https://github.com/${{ github.repository }}.git msa-project
            fi
            cd ~/msa-project
            git pull 
            
            docker network create msa-network || true 
            
            echo "EC2_HOST=${{ secrets.EC2_HOST }}" >> .env
            echo "DATABASE_HOST=${{ secrets.DATABASE_HOST }}" >> .env
            echo "EC2_HOST_FRONT=${{ secrets.EC2_HOST_FRONT }}" >> .env
            echo "POSTGRES_USER=${{ secrets.POSTGRES_USER }}" >> .env
            echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> .env
            echo "POSTGRES_DB=${{ secrets.POSTGRES_DB }}" >> .env
            echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env
            echo "MAIL_PASSWORD=${{ secrets.MAIL_PASSWORD }}" >> .env
            echo "REDIS_USER=${{ secrets.REDIS_USER }}" >> .env
            echo "REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}" >> .env
            echo "PAYMENT_KEY=${{ secrets.PAYMENT_KEY }}" >> .env
            
            docker compose --env-file .env -f zookeeper-kafka.yml pull 
            docker compose --env-file .env -f service-module.yml pull
            
            docker compose --env-file .env -f zookeeper-kafka.yml up -d
            docker compose --env-file .env -f service-module.yml up -d
